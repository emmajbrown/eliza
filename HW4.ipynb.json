{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementing Eliza!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import random\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#All rules can be found here, with one variable or two.\n",
    "possible_responses_list = {\n",
    "    #Rules with one variable\n",
    "    #4. Check for 'like' followed by one variable.\n",
    "    r\".*like\\s(.+)\" : [\"Same! The 0 is great. Why do you like the 0?\",\"How'd you know you like 0?\", \"How come?\"],\n",
    "    \n",
    "    r\"(.+) want\\s(.+)\" : [\"Why do you want 1?\",\"What would happen if you got 1?\", \"How would 1 impact you?\"],\n",
    "    #5. Check for 'because' followed by one variable.\n",
    "    r\".*because\\s(.+)\" : [\"What other reasons besides 0 ?\",\"What are some other reasons besides 0?\"],\n",
    "    #6. Check for 'why' followed by one variable.\n",
    "    r\".*why\\s(.+)\" : [\"I'm not sure! You tell me why you think 0.\",\n",
    "                      \"That's not for me to say. What reason do you think 0 is?\"],\n",
    "    #7. Check for 'yes' in any form of capitalization.\n",
    "    r\"((y|Y)+(e|E)+(s|S)+)\" : [\"0 ! That's great to hear. Tell me more.\",\n",
    "                               \"0 is what I like to hear. Feel free to expand.\",\n",
    "                        \"I love to hear a strong 0. Share more!\"],\n",
    "    #8. Check for 'no' in any form of capitalization.\n",
    "    r\"((n|N)+(o|O)+)\": [\"Ouch, I wish your 0 were a yes! Tell me why you said 0.\",\n",
    "                    \"That's okay! What reason are you wondering about this city?\",\n",
    "                        \"Alright. We can move on. Where do you currently live?\"],\n",
    "    #9. Check for 'try' followed by one variable.\n",
    "    r\".*try\\s(.+)\" :[\"When did you try 0?\", \"I've been wanting to try 0. How was it?\"],\n",
    "    #10. Check for 'the' followed by one variable.\n",
    "    r\".*the\\s(.+)\" : [\"Tell me more about the 0.\", \"How do you feel about the 0?\", \"Can you expand on 0?\"],\n",
    "    #11. Check for anything that is not found elsewhere in the rules.\n",
    "    r\"(.*)\" : [\"Wow, nice. Has this always been the case?\",\n",
    "               \"This makes sense. What's something else you like about this city?\",\n",
    "               \"Do you want to expand on why 0?\", \"That's nice. What else are you wondering about?\",\n",
    "              \"That's great! What's something you don't like about this city?\",\n",
    "               \"What makes you say that?\",\"Why is that the case?\"],\n",
    "    #12. Checks for 'sure' in any capitalization case.\n",
    "    r\"([s|S][u|U][r|R][e|E])\" : [\"Great! Let's continue. Tell me more about that.\",\n",
    "                                 \"Sounds good! I want to hear more about it.\",\"Woo! Share more!\"],\n",
    "    r\"([o|O][k|K])\" : [\"Great! Tell me some more about that.\", \"Good good good. Share more\"],\n",
    "    #Rules with two variables\n",
    "    #1. Check for 'are' with one variable before and one after.\n",
    "    r\"(.+)are\\s(.+)\" : [\"Why do you think 0 are 1?\", \"What makes you think 0 are 1?\"],\n",
    "    #2. Check for 'is' with one variable before and one after.\n",
    "    r\"(.+)is\\s(.+)\" :[\"Why do you think 0 is 1?\", \"I've heard that. Does the fact that 0 is 1 bother you?\",\n",
    "                   \"Why do you bring up 0?\"],\n",
    "    #3. Check for 'not' with one variable before and one after.\n",
    "    r\"(.+)not\\s(.+)\" : [\"Isn't 0 1?\", \"Idk. Doesn't make sense that 0 is not 1. Why do you think that?\", \n",
    "                        \"Wow I didn't know 0 was not 1. Tell me more.\"],\n",
    "    #4. Check for 'can' with one variable before and one after.\n",
    "    r\"(.+)can\\s(.+)\" : [\"Why can 0 1?\", \"I guess that makes sense for 0 to 1. Tell me more.\",\n",
    "                        \"Is that really the case that 0 can 1?\"],\n",
    "    #5. Check for 'someone' with one variable before and one after.\n",
    "    r\"(.+)am\\s(.+)\" : [\"Why are 0 1?\", \"How come 0 are 1?\", \"That's interesting to hear. Why is it that 0 are 1?\"]\n",
    "\n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bot: Welcome To West Coast Central! What is your name?\n",
      "User: Cole\n",
      "Bot: I'm so happy you wanna talk about the cites on the coast of America,  Cole .\n",
      "\n",
      "Bot: Let's get started.What city are you wondering about? SF, Seattle or Sacramento?\n",
      "User: seattle\n",
      "Bot:seattle is one of my favorite places. It's got hikes, drives, great food and beautiful water. Why do you like it?\n",
      "User: the bay\n",
      "Bot: How do you feel about the bay?\n",
      "User: it's nice\n",
      "Bot: Do you want to expand on why it's nice?\n",
      "User: lot's of cool restaurants\n",
      "Bot: That's great! What's something you don't like about this city?\n",
      "User: the seahwaks\n",
      "Bot: Tell me more about the seahwaks.\n",
      "User: their fans are annoying\n",
      "Bot: What makes you think their fans  are annoying?\n",
      "User: they always win\n",
      "Bot: That's great! What's something you don't like about this city?\n",
      "User: my cousins\n",
      "Bot: Why is that the case?\n",
      "User: they live in the city\n",
      "Bot: Can you expand on city?\n",
      "User: seattle\n",
      "Bot: What makes you say that?\n",
      "User: that's the name of the city\n",
      "Bot: How do you feel about the city?\n",
      "User: I like tacos\n",
      "Bot: How come?\n",
      "User: you can put lots of food inside\n",
      "Bot: Is that really the case that you  can put lots of food inside?\n",
      "User: yes\n",
      "Bot: yes ! That's great to hear. Tell me more.\n",
      "User: I have never been to seattle\n",
      "Bot: Why is that the case?\n",
      "User: because I'm afraid of saltwater\n",
      "Bot: What other reasons besides I'm afraid of saltwater ?\n",
      "User: I have no money\n",
      "Bot: That's great! What's something you don't like about this city?\n",
      "User: too many starbucks\n",
      "Bot: Why is that the case?\n",
      "User: lot of people like starbucks\n",
      "Bot: How come?\n",
      "User: it's good coffee\n",
      "Bot: That's great! What's something you don't like about this city?\n",
      "User: starbucks\n",
      "Bot: That's great! What's something you don't like about this city?\n",
      "User: quit\n",
      "Bot: Great talking with you about big cities!\n"
     ]
    }
   ],
   "source": [
    "name = \"\"\n",
    "cities = {  \n",
    "    #1. Check for SF as the city\n",
    "    r\"([s|S][f|F])\": \n",
    "    [\"0 is so popular these days. Everyone loves the fresh air and funny people. What do you like about 0?\",\n",
    "        \"I live right near 0, in Berkeley. People take BART to get across the Bay. What do you like about 0?\",\n",
    "                   \"Go NorCal! I love to spend time in 0 with friends. What do you like about 0?\"],\n",
    "    #2. Check for Seattle as the city\n",
    "    r\"([s|S][e|E][a|A][t|T]{2}[l|L][e|E])\": \n",
    "    [\"Ugh 0 is so great. The space needle is so tall and all the lakes are beautiful. Why do you like it?\",\n",
    "    \"0 is one of my favorite places. It's got hikes, drives, great food and beautiful water. Why do you like it?\",\n",
    "                                \"0 is so hip! Tons of young people and pets. Why do you like it?\"],\n",
    "    #3. Check for Sacramento as the city\n",
    "    r\"([s|S][a|A][c|C][r|R][a|A][m|M][e|E][n|N][t|T][o|O])\": \n",
    "    [\"That's where I'm from! It's got beautiful trees and Victorian homes. Why do you like 0?\",\n",
    "    \"That's where I'm from! Not as big as SF or Seattle, but still got lots of fun to do. Why do you like 0?\",\n",
    "            \"I grew up there! I loved the manageable size and the amazing coffee shops. Why do you like 0?\"]}\n",
    "\n",
    "#This function starts the chat. It gets possible responses for what city the user is interested in.\n",
    "#It picks a random response based on the city inputted.\n",
    "#It uses .replace() to replace the variable in the possible response with the city name.\n",
    "def main():\n",
    "    name = input(\"Bot: Welcome To West Coast Central! What is your name?\" + \"\\nUser: \")\n",
    "    print(\"Bot: I'm so happy you wanna talk about the cites on the coast of America, \",name, \".\")\n",
    "    part_of_west = input(\"\\nBot: Let's get started.\"+\n",
    "                         \"What city are you wondering about? SF, Seattle or Sacramento?\"+\"\\nUser: \")\n",
    "    for c in cities:\n",
    "        match = re.match(c,part_of_west)\n",
    "        if match:\n",
    "            possible_responses = cities[c]\n",
    "            randInt = random.randint(0,len(possible_responses))\n",
    "            go_response = possible_responses[randInt-1]\n",
    "            to_replace = match.groups()\n",
    "            for item in range(0,len(to_replace)):\n",
    "                go_response = go_response.replace(str(item), to_replace[item])\n",
    "            part = input(\"Bot:\" + go_response + \"\\nUser: \")\n",
    "    return chat(part)\n",
    "\n",
    "#This contains the bulk of the chat functionality. \n",
    "#It compiles all possible regex matches btwn input and keys in possible_responses_list.\n",
    "#It removes the generic (.*) match if there are alternate, more specific ones available.\n",
    "#It randomly chooses a regex match from the remaining list_matches to get possible responses for.\n",
    "#It then accesses the possible responses for that match and randomly chooses one to output.\n",
    "#It then replaces all variables in go_response with terms from the input, \n",
    "#based on what variables are in the regex match.\n",
    "\n",
    "def chat(response):\n",
    "    possible_responses = {}\n",
    "    list_matches = []\n",
    "    #Check if user wants to quit chat\n",
    "    if good_bye(response) == True:\n",
    "        print(\"Bot: Great talking with you about big cities!\")\n",
    "        return\n",
    "    else:\n",
    "        #Create a list of possible matches in possible_responses_list\n",
    "        for comment in possible_responses_list.keys():\n",
    "            match = re.match(comment, response)\n",
    "            if match:\n",
    "                list_matches.append(comment)\n",
    "        #Remove (.*) if there are multiple response options to get more specific response to input.\n",
    "        if len(list_matches) > 1:it'\n",
    "            list_matches.remove('(.*)')\n",
    "        #Randomly choose a regex match from keys of list_matches to get a response.\n",
    "        rand = random.randint(0,len(list_matches))\n",
    "        comment = list_matches[rand-1]\n",
    "        match = re.match(comment, response)\n",
    "        if match:\n",
    "            #Randomly choose a certain response to provide\n",
    "            possible_responses = possible_responses_list[comment]\n",
    "            randInt = random.randint(0,len(possible_responses))\n",
    "            go_response = possible_responses[randInt-1]\n",
    "            #Replace variables in the possible response with the words in the input\n",
    "            to_replace = match.groups()\n",
    "            for item in range(0,len(to_replace)):\n",
    "                go_response = go_response.replace(str(item), to_replace[item])\n",
    "            next_input = input(\"Bot: \"+go_response+ \"\\nUser: \")\n",
    "            return chat(next_input)\n",
    "                                                                                           \n",
    "\n",
    "#This function is called if a user wants to quit the chat. It uses one regex \n",
    "#of any variation of the word 'quit'.           \n",
    "def good_bye(response):\n",
    "    match = re.match(r'[q|Q][u|U][i|I][t|T]',response)\n",
    "    if match:\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
